//? #version 420

const float g_kPi = 3.14159265358979323846f;

uniform bool NormalMapping;

vec3 GetWsNormal(vec3 wsVertexNormal, vec3 wsVertexTangent, vec3 textureNormal) {
	const vec3 N = normalize(wsVertexNormal);
	vec3 T = normalize(wsVertexTangent);
	T = normalize(T - dot(T, N) * N); // re-orthogonalize T with respect to N
	const vec3 B = cross(N,T);
	
	const mat3 TBN = mat3(T, B, N);
	if (NormalMapping)
		return TBN * normalize(textureNormal * 2 - 1);
	else
		return N;
}