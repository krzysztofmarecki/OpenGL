//? #version 430 core
#include "shadows.gl"

// dir light
uniform vec3 WsDirLight;
uniform vec3 ColorDirLight;

uniform vec3 WsPosCamera;


// Blinn-Phong
vec3 Spec(vec3 wsNormal, vec3 wsPos, vec3 colorLight, vec3 wsDirLight) {
    const vec3 wsDirView = normalize(WsPosCamera - wsPos);
	const vec3 wsHalfway = normalize(wsDirLight + wsDirView);  
    const float spec = pow(max(dot(wsNormal, wsHalfway), 0.0), 64.0);
    return colorLight * spec;
}

float Attenuation(vec3 wsPosLight, vec3 wsPos) {
	const float distance = max(0.01, length(wsPosLight - wsPos));
    return  1.0 / (distance * distance);
}

struct Foo {
	vec3 colorPureDiffuse;	// pure diffuse light without affecting surface texture
	vec3 color;
};

Foo PointLight(vec3 wsNormal, vec3 wsPos, vec3 wsPosLight, vec3 colorLight, vec3 colorDiffuse, float colorSpecular) {
	const vec3 wsDirLight = normalize(wsPosLight - wsPos);
	const float attenuation = Attenuation(wsPosLight, wsPos);

	const float nDotL = max(dot(wsNormal, wsDirLight), 0);

	const vec3 colorPureDiffuse = nDotL * colorLight * attenuation;
	const vec3 diffuse = colorPureDiffuse * colorDiffuse;
	const vec3 specular = Spec(wsNormal, wsPos, colorLight, wsDirLight) * attenuation * colorSpecular;
	
    return Foo(colorPureDiffuse, diffuse + specular);
}

Foo DirrLight(vec3 wsNormal, vec3 wsPos, float vdDepth, vec3 colorLight, vec3 wsDirLight, vec3 diffColor, float widthLight, float colorSPecular,
	sampler2DArrayShadow ShadowMapArrayPCF, sampler2DArray ShadowMapArrayDepth, sampler3D RandomRotations) {

	const float nDotL = max(dot(wsNormal, wsDirLight), 0);
	const vec3 colorPureDiffuse = nDotL * colorLight;
	const vec3 diffuse = colorPureDiffuse * diffColor;
	const vec3 specular = Spec(wsNormal, wsPos, colorLight, wsDirLight) * colorSPecular;
	
	const float lightning = ShadowVisibility(wsPos, vdDepth, nDotL, wsNormal, widthLight, ShadowMapArrayPCF, ShadowMapArrayDepth, RandomRotations);
	return Foo(lightning * colorPureDiffuse, lightning * (diffuse + specular));
}